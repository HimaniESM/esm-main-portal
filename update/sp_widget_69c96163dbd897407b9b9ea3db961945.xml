<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function () {
	var c = this;
	
	c.capitalize = function(str) {
		if (str.length === 0) return "";
		
		return str.charAt(0).toUpperCase() + str.slice(1); 
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.stats-panel .stat-row {&#13;
  padding-bottom: 15px;&#13;
  &amp;:last-child {&#13;
    padding: 0;&#13;
  }&#13;
}&#13;
&#13;
.fa {&#13;
  width: 15px;&#13;
}&#13;
&#13;
.related-question {&#13;
  padding-bottom: 15px;&#13;
}&#13;
&#13;
&#13;
.bottom-margin-small {&#13;
  margin-bottom: 10px;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>sqanda-related-questions-copy</id>
        <internal>false</internal>
        <link/>
        <name>SQANDA Related Questions Copy</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[// populate the 'data' object
// e.g., data.table = $sp.getValue('table');
(function() {
	data.knowledgeBase = $sp.getPortalRecord().getValue("sqanda_knowledge_base") || gs.getProperty("glide.service_portal.sqanda.default_kb");
	data.questionID = $sp.getParameter("question_id") || $sp.getParameter("sys_id");
	if (!data.questionID){
		var answerId = $sp.getParameter("answer_id");
		if (answerId) {
			var answer = new GlideRecord("kb_social_qa_answer");
			answer.get(answerId);
			data.questionID = answer.getValue('question');
		} else
			return;
	}

	var questionGR = new GlideRecord("kb_social_qa_question");
	if (questionGR.get(data.questionID)) {
		data.question = new Question(questionGR);

		//to make sure we dont return duplicate questions
		var foundQuestionIDs = [];

		foundQuestionIDs.push(data.question.sys_id);

		//just grab three of the tags... dont want this to go on for ages
		//if someone is an overzelous tagger
		data.tags = data.question.tags.slice(0, 3);

		data.tags.forEach(function(tag) {
			tag.questions = [];

			var tagEntryGR = new GlideRecord("sqanda_tag_entry");
			tagEntryGR.addQuery("tag", tag.sys_id);
			tagEntryGR.addQuery("reference_name", "kb_social_qa_question");
			tagEntryGR.query();

			var taggedQuestionIDs = [];
			while(tagEntryGR.next()) {
				taggedQuestionIDs.push(tagEntryGR.getValue('reference_id'));
			}
			
			var taggedQuestionGR = new GlideRecord("kb_social_qa_question");
			taggedQuestionGR.addQuery("kb_knowledge_base", data.knowledgeBase);
			taggedQuestionGR.addActiveQuery();
			taggedQuestionGR.addQuery("sys_id", "IN", taggedQuestionIDs.toString());
			taggedQuestionGR.query();

			var count = 0;
			while(taggedQuestionGR.next() && count < 5) {
				if (!contains(foundQuestionIDs, taggedQuestionGR.getUniqueValue())) {
					tag.questions.push(new Question(taggedQuestionGR));
					foundQuestionIDs.push(taggedQuestionGR.getUniqueValue());
					count++;
				}
			}
		});
		
		data.recentQuestions = [];
		var recentQuestionGR = new GlideRecord("kb_social_qa_question");
		recentQuestionGR.addQuery("kb_knowledge_base", data.knowledgeBase);
		recentQuestionGR.addActiveQuery();
		recentQuestionGR.orderByDesc('sys_created_on');
		recentQuestionGR.query();
		
		var count = 0;
		while(recentQuestionGR.next() && count < 10) {
			if (!contains(foundQuestionIDs, recentQuestionGR.getUniqueValue())) {
				data.recentQuestions.push(new Question(recentQuestionGR));
				foundQuestionIDs.push(recentQuestionGR.getUniqueValue());
				count++;
			}
		}

	}

	function Question(gr) {
		this.sys_created_on = gr.getValue("sys_created_on");
		this.question = gr.getValue("question");
		this.question_details = gr.getValue("question_details");
		this.sys_id = gr.getValue("sys_id");
		this.profile = new Profile(gr.getElement("profile").getRefRecord());

		this.subscribers = 0;
		var subscriberGR = new GlideRecordCounter("kb_social_qa_subscribe");
		subscriberGR.addQuery("question", this.sys_id);
		subscriberGR.query();
		this.subscribers = subscriberGR.getCount();
		
		var viewGR = new GlideRecord("kb_social_qa_view");
		viewGR.addQuery("question", this.sys_id);
		viewGR.query();
		this.views = viewGR.getRowCount();
		
		this.tags = [];
		var labelEntryGR = new GlideRecord("sqanda_tag_entry");
		labelEntryGR.addQuery('reference_id', this.sys_id);
		labelEntryGR.query();
		while(labelEntryGR.next())
			this.tags.push(new Tag(labelEntryGR.getElement('tag').getRefRecord()))
	}

	function Tag(gr) {
		this.sys_id = gr.getUniqueValue();
		this.name = gr.getValue('name');
	}

	function Profile(gr) {
		this.name = gr.getValue("name");
		this.sys_id = gr.getValue("sys_id");
		this.document = {
			sys_id: gr.getValue("document")
		};
	}
	
	function contains(arr, value) {
		for (var i = 0; i < arr.length; i++) {
			if (arr[i].equals(value)) {
				return true;
			}
		}
		
		return false;
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>divya</sys_created_by>
        <sys_created_on>2018-02-21 13:22:51</sys_created_on>
        <sys_id>69c96163dbd897407b9b9ea3db961945</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>SQANDA Related Questions Copy</sys_name>
        <sys_package display_value="esm_sp_esm_main" source="x_infte_esm_sp_esm">3a8ff870dbc41b00fbaa7d668c9619ff</sys_package>
        <sys_policy/>
        <sys_scope display_value="esm_sp_esm_main">3a8ff870dbc41b00fbaa7d668c9619ff</sys_scope>
        <sys_update_name>sp_widget_69c96163dbd897407b9b9ea3db961945</sys_update_name>
        <sys_updated_by>divya</sys_updated_by>
        <sys_updated_on>2018-02-21 13:22:51</sys_updated_on>
        <template><![CDATA[<div>
  <div class="panel panel-default">
    <div class="panel-heading">
    	<h4 class="panel-title">${Question Stats}</h4>
    </div>
    <div class="panel-body stats-panel">
      <div class="stat-row">
        <div class="fa fa-clock-o"></div>
        <span class="stat-description">${Asked} <sn-time-ago timestamp="data.question.sys_created_on"></sn-time-ago></span>
      </div>
      <div class="stat-row">
        <div class="fa fa-star"></div>
        <span ng-if="data.question.subscribers != 1" class="stat-description">${{{data.question.subscribers}} Subscribers}</span>
        <span ng-if="data.question.subscribers == 1" class="stat-description">${{{data.question.subscribers}} Subscriber}</span>
      </div>
      <div class="stat-row">
        <div class="fa fa-eye"></div>
        <span ng-if="data.question.views == 1" class="stat-description">${{{data.question.views}} View}</span>
        <span ng-if="data.question.views != 1" class="stat-description">${{{data.question.views}} Views}</span>
      </div>
    </div>
  </div>
  <div ng-repeat="tag in data.tags" ng-if="tag.questions.length > 0" class="panel panel-default">
    <div class="panel-heading">
      <h4 class="panel-title">${{{c.capitalize(tag.name)}} Questions}</h4>
    </div>
    <div class="panel-body">
      <div class="related-question" ng-repeat="question in tag.questions">
        <a ng-href="?id=kb_social_qa_question1&sys_id={{question.sys_id}}">{{question.question}}</a>
      </div>
      <a class="see-more text-muted" ng-href="?id=community&sys_id={{tag.sys_id}}">${See more related questions}</a>
    </div>
  </div>
  <div ng-if="data.recentQuestions.length > 0" class="panel panel-default">
    <div class="panel-heading">
      <h4 class="panel-title">${Recent Questions}</h4>
    </div>
    <div class="panel-body">
      <div class="related-question" ng-repeat="question in data.recentQuestions">
        <a ng-href="?id=kb_social_qa_question1&sys_id={{question.sys_id}}">{{question.question}}</a>
      </div>
      <a class="text-muted" ng-href="?id=community">${See more recent questions}</a>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
